<#
.SYNOPSIS
    Security Baseline Compliance Report Viewer

.DESCRIPTION
    Reads csv reports generated by the baseline security scanning tool and
    provides a (more) user friendly interface for viewing the compliance data
    then Microsoft Excel.

.NOTES
    Author: [DKI] Daniel Ives

.NOTES
    4/7/2018 [DKI] >> Cleanup of the project files for hosting on Github.
    - Removed DISA STIG zip files.
    - Removed PackageManager config files with share drive paths.
    - Removed Device module config files with share drive paths.

    12/31/2017 [DKI] >> Continuation of refactoring and feature updates.
    ~ Refactored the Open file menu of the Compliance module to use the
      better method set in the Device module.

    12/30/2017 >> Feature updates and directory structure refactoring.
    + Added ping and traceroute options to the menu options of the device
      single view treeview.
    ~ Renamed the lib folder for the modules to modules.
    ~ Renamed the res folder for images to resources.
    ~ Renamed the doc folder to documentation.
    * Fixed bug with the report viewer introduced by the refactor of the STIG
      viewer.
    + Added summarization of the total number of devices for the report in the
      STIG viewer.
    + Added a utility for parsing cache content from the STIG scanner.  The
      utility is kept in the bin folder.
    + Added to the diff.exe utility to the bin folder.
    + Added database folder for holding information localy.
    + Added settings features and configuration dialog for device module.
    ~ Refactored OnLoad registration logic between the modules as a custom
      loader object with a mandatory Load() function. This way references to
      other objects that the load function needs access to can be passed with
      the custom object as NoteProperties.
    ~ Refactored the Device module's Open file menu. Separated the logic for
      loading the data from the file from the menu handler into it's own func-
      tion so that the same logic could be used during OnLoad to open a data-
      base file configured in the settings dialog.

    5/23/2017 [DKI] >> Feature updates and major refactoring.
    + Added STIG Viewer support for viewing STIG rule details and recommended
      validation/fix actions.
    + Added PuTTY support.
    + Added support for marking open findings as having a POA&M in-place.
    + Added images to represent the different compliance states for the the
      tree view navigation pane.
    + Added pop-out functionality for the tree view navigation pane for users
      who need more screen area.
    ~ Refactored the seperate pages/tabs into modules that are loaded dynamically
      by the execution script for easier code maintenance.
    ~ Refactored the navigation TreeView on the Compliance tab into a seperate
      [Custom] class module to enable code reuse for future tabs.

    4/28/2017 [DKI] >> Feature Updates
    + Added report feature to summarize compliance data.
    - Disabled loading the treeview on opening a compliance report. Users must
      first set their view settings.
    
    4/27/2017 [DKI] >> Feature updates.
    - Commented out the SortBy code as it is not fully implemented, and it will
      take a while before it is.  There are much bigger fish to fry first.
    
    4/26/2017 [DKI] >> Featrue completion.
    + Finished the tree view grouping settings application logic. The settings
      can now be applied to the tree view as long as data has been loaded.
#>

Add-Type -AssemblyName System.IO.Compression.FileSystem
Add-Type -AssemblyName System.Windows.Forms

#$DebugPreference = 'Continue'

$ModuleInvocationPath  = [System.IO.Path]::GetDirectoryName($MyInvocation.MyCommand.Definition)
Import-Module "$ModuleInvocationPath\modules\Putty\Putty.psm1" -Prefix Putty
Import-Module "$ModuleInvocationPath\modules\STIGViewer\STIGViewer.psm1"
Import-Module "$ModuleInvocationPath\modules\Compliance\Compliance.psm1" -Prefix Compliance
Import-Module "$ModuleInvocationPath\modules\Device\Device.psm1" -Prefix Device

$OnLoad = New-Object System.Collections.ArrayList

###############################################################################
# Window Definition
$MainForm = New-Object System.Windows.Forms.Form
$MainForm.Text          = "Network Operations Sustainment Center"
$MainForm.Size          = New-Object System.Drawing.Size(1200, 600)
$MainForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen

$MainForm.Add_Load({
    param($sender, $e)

    # Set proper Z-order
    # -- Must be performed before the handlers of child controls.
    $TabContainer.BringToFront()

    # Execute Child Handlers
    foreach ($handler in $OnLoad) {
        $handler.Load()
    }

    # Discard the OnLoad Handlers (Free Memory)
    # -- These only ever used once during the initial loading of the window.
    $OnLoad.Clear()
})

###############################################################################
# Main Menu
$Menu = New-Object System.Windows.Forms.MenuStrip
    $Menu.Dock = [System.Windows.Forms.DockStyle]::Top
    $Menu.Name = 'MainMenu'

    $MainForm.MainMenuStrip = $Menu
    [void]$MainForm.Controls.Add($Menu)

###############################################################################
# Base Content Tab Control Container Definitions
$TabContainer = New-Object System.Windows.Forms.TabControl
    $TabContainer.Dock = [System.Windows.Forms.DockStyle]::Fill
    
    [void]$MainForm.Controls.Add( $TabContainer )

###############################################################################
# Register Components
Initialize-DeviceComponents $MainForm $TabContainer $Menu $OnLoad
#[void]$Menu.Items.Add( (New-Object System.Windows.Forms.ToolStripSeparator) )
Initialize-ComplianceComponents $MainForm $TabContainer $Menu $OnLoad
#[void]$Menu.Items.Add( (New-Object System.Windows.Forms.ToolStripSeparator) )
Initialize-PuttyComponents $null $null $Menu $OnLoad

###############################################################################
# Open Window
[void]$MainForm.ShowDialog()

$MainForm.Dispose()